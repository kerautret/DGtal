/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/**
   
@page moduleAlphaThickSegmentReco Alpha Thick Segment recognition   

@writers Bertrand Kerautret 

Part of the \ref packageGeometry.



The primitive of the Digital Straight Segment (described here: @ref
moduleArithDSSReco) is commonly used to extract geometric information
from digital contours. It is exploited in various estimators as for
instance in tangent \cite LachaudIVC2007 or curvature estimation
 \cite KerautretLachaud2009 . However, this primitive is not efficient to
directly process real contours with the potential presence of noise. To
overcome this limitation the primitive of blurred segment was first
introduced by Debled-Rennesson \i etal \cite debledFuzzy2005 allowing to handle noise or contour
irregularities.


We present here the implementation of the recognition of the alpha
thick segment as described in \cite FaureTangential2008. From a
maximal thickness, it permits the recognition of a thick segment
with the possibility to take into accounts some noise. Moreover the
segment can be detected from points which are not necessary connected
or with floating coordinates.

@note The proposed implementation is mainly a backport from
 [ImaGene](https://gforge.liris.cnrs.fr/projects/imagene) with some
 various refactoring.


[TOC]


\section moduleAlphaThickSegmentRecoIntro  Alpha Thick Segment

The first definition of \b blurred \b segment  \cite debledFuzzy2005
relies on the definition of the digital straight line (@ref
moduleArithDSSReco):

A set \f$ \mathcal{S}_f \f$ of consecutive points (\f$ \mathcal{S}_f
\geq 2 \f$) of an 8-connected curve is a blurred segment with order
\f$ d \f$ if there exists a discrete line \f$ \mathcal{D}(a,b, \mu,
\omega) \f$ such that all points of \f$ \mathcal{S}_f \f$ belong to
\f$ \mathcal{D} \f$ and \f$ \frac{\omega}{max(|a|,|b|) \leq d
} \f$. The line \f$ D \f$ is said bounding for \f$ \mathcal{S}_f \f$.


Following this definition, the authors also propose an incremental
linear time algorithm to segment a digital curve into blurred segments
of order \f$ d \f$. The main drawback of such a decomposition is the
non optimality (it implies over segmentation).  Then the author
introduce the notion blurred segment of width \f$ \nu \f$ 
\cite debledrennessonblurred2005. The width \f$ \nu \f$ is associated to the
isothetic thickness of a set of points, ie. the minimum value between
its vertical and horizontal thicknesses (see figure below).

@image html convexHullVT_HT.png "The isothetic thickness of this convexhull is the minimum between its vertical (VT) and horizontal (HT) thickness. The points P,Q and S are the antipodal pair." 
@image latex convexHullVT_HT.png "The isothetic thickness of this convexhull is the minimum between its vertical (VT) and horizontal (HT) thickness. The points P,Q and S are the antipodal pair." width=5cm

From this notion of isothetic thickness follows the \b blurred \b segment definition \cite DebledRennessonBlurred2005 :

A bounding line of a digital set \f$ \mathcal{S}_b \f$ is said optimal
if its isothetic thickness is equal to the isothetic thickness of the
convex hull \f$ conv(\mathcal{S}_b) \f$. \f$ \mathcal{S}_b \f$ is a
blurred segment of width \f$ \nu \f$ if and only if its optimal
bounding line has an isothetic distance less or equal to \f$ \nu \f$.


The actual implementation proposed here, relies on the convex hull
computed incrementally with the melkman algorithm in linear time \cite melkmanLine1987.  
It allows to add point on the front of the current
segment and to update the value of vertical/horizontal thickness with
a coast of \f$O( log\ n) \f$ (instead \f$O(n\ log\ n) \f$ thanks to the
Buzer optimization \cite lilianComputing2007 ).  Note that the
convex hull maintenance in linear time with point subtraction
proposed by Buzer \cite lilianComputing2007 is not yet implemented.



\section moduleAlphaThickSegmentRecoDetails   Alpha Thick Segment Recognition


\subsection moduleAlphaThickSegmentRecoDetails-TypeInputContours Type of Input Points 

This implementation of the Alpha thick segment can take as input
different types of points which just need to be given in the template
parameter (TInputPoint). The input points are not necessary connected
but the important constraint is that the sequence of point should not
contains loop. Open or closed contours can be processed by the segment
computer (if you use contour iterator in the initialisation you have just to
check manually the end condition or the iterator type).

@note Contrary to the implementation proposed in \cite
DebledRennessonBlurred2005 the input points doesn't need to have
  axis increasing coordinates.

As illustration, the alpha thick segments can be recognized on such contours:
@image html alphThickSegmentInputPoints.png "Examples of different input coutours which can be used with the alpha thick segment. (1) Input contour with non increasing axis coordinates, (2) contour with non connected points, (3) polygonal contour with floating points. " 
@image latex alphThickSegmentInputPoints.png "Examples of different input coutours which can be used with the alpha thick segment. (1) Input contour with non increasing axis coordinates, (2) contour with non connected points, (3) polygonal contour with floating points. " width=5cm



And the example of contour containing loops can produce some errors:
@image html alphThickSegmentInputPointsLoop.png "Example of input contour (1) containing loop which produce incorrect convexhull (2)." 
@image latex alphThickSegmentInputPointsLoop.png "Example of input contour (1) containing loop which produce incorrect convexhull (2)." width=5cm



\subsection moduleAlphaThickSegmentRecoDetails-Code Recognizing an Alpha Thick Segment

To recognize an alpha thick segment, you need first to include the AlphaThickSegmentComputer header (with eventually the different namespace defined in StdDefs.h):
 @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisyInclude


Afterwards, you have to set the type of the primitive by choosing the
input point type. For instance, if you have to recognize input points
with floating coordinates, you can define:

 @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisyTypedef


To import an input contour you can use the the PointListReader class:
  @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisyReadFile 

Then, you can define and initialize a new segment with maximal thickness set to 15:
  @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisInit

@note The maximal thickness given in initialization is the same than
the width given by the method width() of the ParallelStrip primitive
(not the vertical/horizontal width of the convex hull).


You can extend the segment by adding point to the front:
  @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisInitAndReco 


The final alpha thick segment can also be displayed with a Board3D as other 2D geometric primitives:
@snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementDisplay

As described in the Board3D documentation  (@ref dgtal_dgtalboard_sec14), this primitive has two main display modes:
- default: the input point are displayed with its bounding box (the mode of the displayed points can also be changed).
- BoundingBox: only the bounding box is displayed.



You can also customize the segment color by using the CustomStyle object:
@snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisCustomColor 

As illustration the segment recognition given in
exampleAlphaThickSegmentNoisy.cpp produces such a display:

@image html exampleAlphaThickSegmentNoisy.png "Simple example of some alpha thick segments recognition with alpha = 2, 9  and 15."
@image latex exampleAlphaThickSegmentNoisy.png "Simple example of some alpha thick segments recognition with alpha = 2, 9  and 15." width=6cm





Other examples with other input types are given here: exampleAlphaThickSegment.cpp.


\subsection moduleAlphaThickSegmentRecoDetails-CodeInitIter AlphaThickSegmentComputer with a point iterator

Since the  AlphaThickSegmentComputer class is a model of
CForwardSegmentComputer, you can initialize it from a given input
point iterator. Then, the computer will not store the segment points.
With such an initialization the segment computer can be used in a quite
similar way than in the previous example:

 @snippet examples/geometry/curves/exampleAlphaThickSegmentNoisy.cpp exampleAlphaThickSegementNoisInitAndReco2 


Since the iterator is defined from an open contour, we check that we
are not at the end of the input contour before applying any extension.



\section moduleAlphaThickSegmentRecoGreedy  Example of greedy segmentation into Alpha Thick Segment

The greedy segmentation of a digital contour can easily  be done as follows:
 @snippet examples/geometry/curves/greedyAlphaThickDecomposition.cpp greedyAlphaThickDecompositionAlgo 


The resulting set of segments can be displayed using the bounding box mode:
@snippet examples/geometry/curves/greedyAlphaThickDecomposition.cpp greedyAlphaThickDecompositionModeDisplay

You should obtain such a visualization:

@image html examplegreedyAlphaThickDecomposition.png "Greedy decomposition with alpha thick segments with alpha = 4"
@image latex examplegreedyAlphaThickDecomposition.png "Greedy decomposition with alpha thick segment with alpha = 4" width=6cm


The whole example can be found in \ref greedyAlphaThickDecomposition.cpp.






*/




/**
   This example a simple Alpha Thick segment recognition given from a freeman chain contour.
   @see \ref moduleAlphaThickSegmentReco

   @image html exampleAlphaThickSegment.png "Simple example of some alpha thick segments recognition with alpha = 2, 5  and 15."
   @image latex exampleAlphaThickSegment.png "Simple example of some alpha thick segments recognition with alpha = 2, 5  and 15." width=6cm
   \example geometry/curves/exampleAlphaThickSegment.cpp
*/



/**
   This example shows a simple alpha thick segment recognition given from a noisy input contour with floating point coordinates.
   @see \ref moduleAlphaThickSegmentReco

   @image html exampleAlphaThickSegmentNoisy.png "Simple example of some alpha thick segments recognition with alpha = 2, 9  and 15."
   @image latex exampleAlphaThickSegmentNoisy.png "Simple example of some alpha thick segments recognition with alpha = 2, 9  and 15." width=6cm
   \example geometry/curves/exampleAlphaThickSegmentNoisy.cpp
*/


/**
   This example shows the greedy decomposition of an noisy contour from the alpha thick segment primitive with alpha = 4.
   @see \ref moduleAlphaThickSegmentReco

   @image html examplegreedyAlphaThickDecomposition.png "Greedy decomposition with alpha thick segments with alpha = 4"
   @image latex examplegreedyAlphaThickDecomposition.png "Greedy decomposition with alpha thick segment with alpha = 4" width=6cm
   \example geometry/curves/greedyAlphaThickDecomposition.cpp
*/






}
